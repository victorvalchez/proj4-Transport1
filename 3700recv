#!/usr/bin/env -S python3 -u

import argparse
import json
import select
import socket
import sys


def compute_checksum_reciever(msg_dic):
    # compute checksum of the recieved packet

    msg_st = json.dumps(msg_dic, sort_keys=True)

    msg = ''.join(format(ord(x), 'b') for x in msg_st)

    # UDP devides the packet in 16-bit words
    summatory = 0
    i = 16
    while i < len(msg):
        summatory += int(msg[i - 16:i], 2)
        i += 16

    summatory = bin(summatory)

    # Add the overflow bits
    if len(summatory) > 16:
        x = len(summatory) - 16
        summatory = bin(int(summatory[0:x], 2) + int(summatory[x:], 2))[2:]
    if len(summatory) < 16:
        summatory = '0' * (16 - len(summatory)) + summatory

    # Calculating the complement of sum
    checksum = ''
    for i in summatory:
        if i == '1':
            checksum += '1'
        else:
            checksum += '0'
    return checksum


def check_checksum(send, recieve):
    summatory = bin(int(send, 2) + int(recieve, 2))[2:]

    # Finding the sum of checksum and received checksum
    result = ''
    for i in summatory:
        if i == '1':
            result += '0'
        else:
            result += '1'

    # If sum = 0, No error is detected
    return int(result, 2) == 0


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        # set to save all the seq we received, to avoid duplicate packets with O(1) complexity
        self.seq_set = set()
        # queue of packets that arrive at the wrong time
        self.queue = []
        # last seq read in the right order
        self.seq_number = 1

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        """Send message"""
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        """Print messsages to STDERR"""
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def add_elem_to_queue(self, msg):
        """Add a new element in the right postion of the queue"""
        exit_flag = False
        i = 0
        while not exit_flag:
            if i == len(self.queue):
                self.queue.append(msg)
                exit_flag = True
            elif msg['seq'] < self.queue[i]['seq']:
                self.queue.insert(i, msg)
                exit_flag = True
            else:
                i += 1

    def run(self):
        """Run the programm"""
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]
                try:
                    msg = json.loads(data.decode('utf-8'))
                    self.log("Received data message %s" % msg)

                    # Check checksum
                    checksum_sender = msg['checksum']
                    del msg['checksum']
                    checksum_reciever = compute_checksum_reciever(msg)

                    if check_checksum(checksum_sender, checksum_reciever):

                        if msg['seq'] not in self.seq_set:
                            self.seq_set.add(msg['seq'])

                            # Check we received the messages in order
                            if msg['seq'] == self.seq_number:
                                # Print out the data to stdout
                                self.log("Printed message with seq " + str(msg["seq"]))
                                print(msg["data"], end='', flush=True)
                                self.seq_number += 1  # len(msg['data'].encode('utf-8'))

                                exit_flag = False
                                # We check if we have the next one in a loop, in case there's more than one available
                                while not exit_flag and len(self.queue) > 0:
                                    # We maintain our queue in order, so we just need to check the first elem
                                    if self.queue[0]['seq'] == self.seq_number:
                                        self.log("printed message with seq " + str(self.queue[0]["seq"]))
                                        print(self.queue[0]["data"], end='', flush=True)
                                        self.seq_number += 1
                                        self.queue.pop(0)
                                    else:
                                        exit_flag = True

                            else:
                                # Add element to the queue of wrong order
                                self.add_elem_to_queue(msg)

                            self.log("RECV | Sending message {type: ack, seq_ACK: " + str(self.seq_number-1) + "}")

                        else:
                            self.log("Received duplicated packet with seq = %s" % msg['seq'])

                        # Always send an ACK back, with the las seq number in order
                        ACK_msg = {"type": "ack", "seq_ACK": self.seq_number-1}
                        ACK_msg["checksum"] = compute_checksum_reciever(ACK_msg)
                        self.send(ACK_msg)

                    else:
                        self.log('Corrupted packet')

                except (ValueError, KeyError, TypeError):
                    self.log("Received corrupt packet")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
