#!/usr/bin/env -S python3 -u

import argparse
import json
import select
import socket
import sys
import time

DATA_SIZE = 1375


def check_checksum(send, receive):
    summatory = bin(int(send, 2) + int(receive, 2))[2:]

    # Finding the sum of checksum and received checksum
    result = ''
    for i in summatory:
        if i == '1':
            result += '0'
        else:
            result += '1'

    # If sum = 0, No error is detected
    return int(result, 2) == 0


def compute_checksum_sender(msg_dic):
    """Compute checksum"""
    msg_st = json.dumps(msg_dic, sort_keys=True)
    msg = ''.join(format(ord(x), 'b') for x in msg_st)

    # UDP devides the packet in 16-bit words
    summatory = 0
    i = 16
    while i < len(msg):
        summatory += int(msg[i - 16:i], 2)
        i += 16
    summatory = bin(summatory)

    # Add the overflow bits
    if len(summatory) > 16:
        x = len(summatory) - 16
        summatory = bin(int(summatory[0:x], 2) + int(summatory[x:], 2))[2:]
    if len(summatory) < 16:
        summatory = '0' * (16 - len(summatory)) + summatory

    # Calculate the complement of summatory
    result = ''
    for i in summatory:
        if i == '1':
            result += '0'
        else:
            result += '1'

    return result


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.all_sent = False

        self.seq = 0  # keeps truck of the number of sended packets to the receiver
        self.window = 1  # Space available in the receiver to read

        self.sent_packets = {}

        self.seq = 1  # keeps truck of the number of sended packets to the receiver
        self.last_ACK = 0  # last ACK received

        self.rtt = 1  # Save the last rtt time
        self.time_init = 0
        self.time_end = 0

        self.duplicate_ACKS = 0  # counter of duplicate ACKs to implement TCP Reno

        self.ssthresh = 10

    def log(self, message):
        """Print messages to STDERR"""
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send_message_with_checksum(self, msg, seq):
        """Compute checksum and send message"""
        msg["checksum"] = compute_checksum_sender(msg)
        self.sent_packets[seq] = msg['data']
        self.socket.sendto(json.dumps(msg).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        """Run the program"""
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            # Set timeout to 1s
            socks = select.select(sockets, [], [], 0.1)[0]
            self.time_end = time.time()
            # self.log("All sent: " + str(self.all_sent))

            if self.all_sent and self.last_ACK == self.seq - 1:
                self.log("All ACK received, exiting")
                sys.exit(0)

            # if self.waiting:
            # self.log("HA ENTRADO")
            # self.log("ACKS LEFT: " + str(self.ACKs_left))
            # self.log("current RTT: " + str(self.rtt))
            # self.log(("current window: " + str(self.window)))

            if self.waiting and self.last_ACK < self.seq - 1:
                if (self.time_end - self.time_init) > self.rtt * 2:
                    # time-out has occured, resend all the remaining packets

                    for seq in range(self.last_ACK + 1, self.seq):
                        msg = {"type": "msg", "seq": seq, "data": self.sent_packets[seq]}
                        self.log("Resending message '%s'" % msg)
                        self.send_message_with_checksum(msg, seq)

                    self.time_init = time.time()

                    self.ssthresh = max(self.window / 2, 1)
                    self.window = 1

            for conn in socks:
                if conn == self.socket:
                    # Read the response of the receiver
                    k, addr = conn.recvfrom(65535)
                    try:
                        # Check if the message can be read
                        msg = json.loads(k.decode('utf-8'))
                        self.log("Received message '%s'" % msg)

                        checksum_reciever = msg['checksum']
                        del msg['checksum']
                        checksum_sender = compute_checksum_sender(msg)

                        if check_checksum(checksum_sender, checksum_reciever):
                            # First we check that it is not a duplicate ACK
                            if msg['seq_ACK'] > self.last_ACK:
                                self.log("WINDOW: " + str(self.window))
                                self.log("ssthresh: " + str(self.ssthresh))

                                if self.window < self.ssthresh:
                                    # Slow start
                                    self.window += 1
                                else:
                                    # Congestion avoidance

                                    self.window += (1 / self.window)

                                # Since it was acknowledged we can enlarge the window size
                                self.window += msg['seq_ACK'] - self.last_ACK

                                # update rtt
                                self.rtt = 0.2 * (self.time_end - self.time_init) + 0.8 * self.rtt
                                # self.log("RTT updated: " + str(self.rtt))

                                self.last_ACK = msg['seq_ACK']

                                if self.last_ACK == self.seq - 1:
                                    # Not waiting for an ACK
                                    self.waiting = False
                                    # self.window = self.cwnd * DATA_SIZE
                            else:
                                self.log("Received duplicated ACK with seq = %s" % msg['seq_ACK'])
                                """self.duplicate_ACKS += 1
                                if self.duplicate_ACKS == 3:
                                    self.window = self.window / 2

                                    #fast re-transmit
                                    msg = {"type": "msg", "seq": self.last_ACK + 1, "data": self.sent_packets[self.last_ACK + 1]}
                                    self.log("Fast retransmit of message '%s'" % self.sent_packets[self.last_ACK + 1])
                                    self.send_message_with_checksum(msg, self.last_ACK + 1)"""



                        else:
                            self.log("Corrupted ACK from the reciever")

                    except (ValueError, KeyError, TypeError):
                        self.log("Received corrupt packet")

                elif conn == sys.stdin:
                    self.duplicate_ACKS = 0  # with a new block of data to send we restart the ACKs counter
                    exit_flag = False
                    # Read the data that must be transmited to the receiver
                    # self.log('window ' + str(self.window))
                    while self.window * DATA_SIZE >= DATA_SIZE and not exit_flag:
                        # self.log(str(self.window * DATA_SIZE))
                        data = sys.stdin.read(DATA_SIZE)
                        # Check if EOF
                        if len(data) == 0:
                            exit_flag = True
                            self.all_sent = True
                            # self.log("All sent!")
                        else:
                            msg = {"type": "msg", "seq": self.seq, "data": data}
                            self.log("Sending message '%s'" % msg)
                            self.send_message_with_checksum(msg, self.seq)

                            self.seq += 1

                            self.time_init = time.time()
                            self.window -= 1

                    # When there is no window available, wait for ACK
                    self.waiting = True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
